# All values that occur in a turn (energy drain, age increment, etc. is updated
# each *FRAME*. This means that, assuming the FPS (frames per second) is 60 fps,
# then 60 frames occur each second. Meaning, all relevant values are updated (60n) times
# per second.

# Ex 1: Old death occurs after 10000 frames. This is equal to (10000/60) ï¿½ 170 seconds
# Ex 2: Mating counter rises with 0.05 each frame. This equals (0.05*60) = 3/s


entity:

  image: optimusfly  # What image the entity will have
  start_size: !!python/tuple [30, 60]  # [width, length]
  start_amount: 30  # Starting population size
  start_speed: !!python/tuple [8, 12]  # start speed randomized as [min, max].

  start_energy: 200000  # Start energy capacity.
  energy_drain_formula: '0.1+0.3*x*y'  # energy drain as a function of x and y, where x = speed and y = size
  energy_food: 5000  # How much energy one food gives.

  mating_chance: 0.1 # Odds are for mating when collision occurs.
  mating_requirement: 2000  # How big mating counter is needed to mate.
  mating_age_requirement: 1000  # How old you have to be to mate.
  mating_energy: 10000  # How much energy is needed to mate.
  gene_variation: 4  # +- how much a gene can vary between (par+par)/2

  old_death: 100  # At what age you die of old age.
  old_age_formula: '10**(-35)*x**7'

  direction_speed_decrement: !!python/tuple [1, 10]  # (min, max) of how tired you get of your current direction each turn (speed / value)
  direction_roof: 100 # What the direction-counter starts from.

food:

  image: optimusfly
  size: !!python/tuple [10, 10]

  amount: 10
  burst: 200  # Burst spawning counter. When it reaches this value, food is spawned.
  burst_counter: !!python/tuple [2, 5]  # (min, max) increment of the burst.

statistics:

  auto_start_scatter: true  # If the scatter plot program should start automatically.
  kill_on_main_exit: true  # If the scatter plot program should exit when the main program is exited.

  noting_counter: 100  # How often new values come.
  old_values_timer: 2  # Seconds between checks if new values has arrived
  pause_timer: 2  # Delay between two frames, assuming there are new values.

screen:

  # [1680, 863]
  manual_dims: !!python/tuple [1680, 863]  # Use manual_dims: null for automatic resolution.

  window_roof_offset: 31  # How much the "window roof" is offset downwards.
  window_floor_offset: 40  # How much the "window floor" is offset upwards.

  border_roof_offset: 18  # How much the "border roof" is offset downwards.
  border_left_offset: 14  # How much the left side of the border is offset to the right.
  border_width_factor: 0.99  # (border width) / (window width)
  border_height_factor: 0.98  # (border height) / (window height)
  border_thick: 3  # How thick the border line will be.
  border_color: !!python/tuple [255, 255, 255, 255]  # (255, 255, 255, 255) = white with 255 alpha (opacity)
